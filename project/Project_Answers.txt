			      EE 109  - Fall 2022
				  Speed Trap


Checkpoint 1:

1.  Splash screen with your name shown at start.

2.  Sensors start and stop timing.  If a measurement is started but not
    completed after 4 sec, the measurement is terminated and a message shown on
    the LCD.

3.  Elapsed time and speed displayed properly.  The elapsed time is shown to 1
    ms precision and the calculation of the speed based on the time delay
    between the sensors is correct and is shown to a precision of 0.1 cm/sec.

4.  The LED timing indicator operates properly, going on at the start of a
    timing event and off when it is complete.

5.  Rotary encoder can adjust threshold between 1 and 99 cm/sec.

6.  Buzzer sounds warning if speed measured on the local device is above the
    speed set with the rotary encoder.

Checkpoint 2:

1.  The servo motor adjusts the indicator to correctly point at speed that was
    measured on the local device.

2.  The maxium speed threshold is stored in EEPROM and retrieved when
    restarted.

3.  After a speed measurement is complete the device sends local speed to
    remote device over the serial link.

4.  Device can receive a speed from the remote device and displays it on LCD
    with 0.1 cm/sec precision.

5.  The red and green LEDs operate to show how the local and remote speeds
    compare.



Review Question 1 (Cost Analysis):

Assume we are building 1000 units of this system.  Use the provided part
numbers (see the webpage) and the digikey.com or jameco.com website to find the
total **cost per unit** (again assume we build a quantity of 1000 units) for
these speed traps.  Itemize the part costs (list each part and its unit cost
when bought in units of 1000) and then show the final cost per unit below.
Note: You only need to price the components used in the project (not all the
components in your lab kit.  Also, you do not need to account for the cost of
the circuit board or wires. In a real environment we would manufacture a PCB
(Printed Circuit Board). As an optional task, you can search online for PCB
manufacturers and what the costs and options are in creating a PCB.

Arduino: 27.6 per one
LCD: 8.90 for 10+
2 680R Resistor: 0.01144*2=0.02288
2 240R Resistor: 0.01144*2=0.02288
2 1.3kR Resistor: 0.01144*2=0.02288
Green LED: 0.10712 
Red LED: 0.16788 
Yellow LED: 0.08531 
74HCT125: 0.25610 
Rotary encoder: 2.34420
Knob: 0.89 
Buzzer: 0.47797
Server motor: 4.76 for 100+
2 White LED: 0.22200*2 = 0.444
2 Phototransistor: 1.2*2 =2.4

Total cost per unit:
27.6+8.9+0.023*3+0.107+0.168+0.085+0.256+2.344+0.89+0.478+4.76+0.444+2.4 = 48.5$


Review Question 2 (Health/Safety/Reliability)

Assume this system was to be sold to consumers for use at their home.

Considering reliability, health, and safety...

 - What scenarios might you suggest testing (considering both HW and SW) 
    before releasing the product for use? 

    1. Test if all hardwares could still work properly if this product falls to the ground 
        or get hit. For example, see if the LEDs still light up if the product falls to the ground.
    2. Test if all hardwares could still work properly under extremely hot summer condition and extremely
        cold winter condition.
    3. Test if the program could behave properly if the user swipes the card back and forth extremely fast
    4. Test if the program could recognize corrupted serial data if the input wire falls off during data transmission etc.



 - How might you make your design more reliable? By reliability we don't just
   mean keeping it running correctly (though you should consider that), but
   also how you can detect that a connected component has failed to gracefully
   handle such situations.  You can consider both HW and SW points of failure,
   issues related to the operational environment, etc. and how to mitigate
   those cases.
    1. Glue the components on the board so that they don't fall off easily.
    2. Use checkers/checking functions to see if some input value would cause overflow. 
        i.e. extremely large velocity/extremely short time interval
    3. Write more interrupts to detect hardware changes when they're not supposed to change.
        and display corresponding error messages to the user by LCD. 






